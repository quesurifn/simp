// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type AuditLog struct {
	ID           string  `json:"id"`
	OrgID        string  `json:"orgId"`
	UserID       string  `json:"userId"`
	Action       string  `json:"action"`
	ResourceType string  `json:"resourceType"`
	ResourceID   string  `json:"resourceId"`
	Changes      *string `json:"changes,omitempty"`
	IPAddress    *string `json:"ipAddress,omitempty"`
	CreatedAt    string  `json:"createdAt"`
}

type BatchCheckAccessInput struct {
	Token    string              `json:"token"`
	Requests []*CheckAccessInput `json:"requests"`
}

type BatchCheckAccessResponse struct {
	Responses []*CheckAccessResponse `json:"responses"`
}

type BatchCreateRoutesResponse struct {
	Routes []*Route `json:"routes"`
	Errors []*Error `json:"errors,omitempty"`
}

type CheckAccessInput struct {
	Token   string  `json:"token"`
	Path    string  `json:"path"`
	Method  string  `json:"method"`
	Context *string `json:"context,omitempty"`
}

type CheckAccessResponse struct {
	Allowed               bool     `json:"allowed"`
	Reason                *string  `json:"reason,omitempty"`
	RequiredPermissionIds []string `json:"requiredPermissionIds,omitempty"`
}

type CreateOrganizationInput struct {
	Name             string  `json:"name"`
	DisplayName      *string `json:"displayName,omitempty"`
	LogoURL          *string `json:"logoUrl,omitempty"`
	PrimaryEmail     string  `json:"primaryEmail"`
	BillingEmail     *string `json:"billingEmail,omitempty"`
	Phone            *string `json:"phone,omitempty"`
	SubscriptionPlan *string `json:"subscriptionPlan,omitempty"`
	Settings         *string `json:"settings,omitempty"`
}

type CreateRoleInput struct {
	OrgID         string  `json:"orgId"`
	Name          string  `json:"name"`
	Description   *string `json:"description,omitempty"`
	PermissionIds *string `json:"permissionIds,omitempty"`
	IsSystemRole  *bool   `json:"isSystemRole,omitempty"`
	IsDefault     *bool   `json:"isDefault,omitempty"`
	Priority      *int32  `json:"priority,omitempty"`
}

type CreateRouteInput struct {
	OrgID           string   `json:"orgId"`
	Path            string   `json:"path"`
	BasePath        *string  `json:"basePath,omitempty"`
	Methods         []string `json:"methods"`
	Description     *string  `json:"description,omitempty"`
	Metadata        *string  `json:"metadata,omitempty"`
	IsProtected     bool     `json:"isProtected"`
	IsPublic        bool     `json:"isPublic"`
	RequiredRoleIds []string `json:"requiredRoleIds,omitempty"`
}

type CreateUserInput struct {
	OrgID            string   `json:"orgId"`
	Email            string   `json:"email"`
	Password         string   `json:"password"`
	FirstName        *string  `json:"firstName,omitempty"`
	LastName         *string  `json:"lastName,omitempty"`
	Phone            *string  `json:"phone,omitempty"`
	RoleIds          []string `json:"roleIds,omitempty"`
	Attributes       *string  `json:"attributes,omitempty"`
	Preferences      *string  `json:"preferences,omitempty"`
	SendWelcomeEmail *bool    `json:"sendWelcomeEmail,omitempty"`
}

type Error struct {
	Code     string  `json:"code"`
	Message  string  `json:"message"`
	Details  *string `json:"details,omitempty"`
	Metadata *string `json:"metadata,omitempty"`
}

type ListRolesFilter struct {
	OrgID              string  `json:"orgId"`
	PageSize           *int32  `json:"pageSize,omitempty"`
	PageToken          *string `json:"pageToken,omitempty"`
	IncludeSystemRoles *bool   `json:"includeSystemRoles,omitempty"`
}

type ListRolesResponse struct {
	Roles         []*Role `json:"roles"`
	NextPageToken *string `json:"nextPageToken,omitempty"`
	TotalCount    int32   `json:"totalCount"`
}

type ListRoutesFilter struct {
	OrgID           string  `json:"orgId"`
	PageSize        *int32  `json:"pageSize,omitempty"`
	PageToken       *string `json:"pageToken,omitempty"`
	ProtectedOnly   *bool   `json:"protectedOnly,omitempty"`
	UnprotectedOnly *bool   `json:"unprotectedOnly,omitempty"`
	PathPrefix      *string `json:"pathPrefix,omitempty"`
}

type ListRoutesResponse struct {
	Routes        []*Route `json:"routes"`
	NextPageToken *string  `json:"nextPageToken,omitempty"`
	TotalCount    int32    `json:"totalCount"`
}

type ListUsersFilter struct {
	OrgID     string   `json:"orgId"`
	PageSize  *int32   `json:"pageSize,omitempty"`
	PageToken *string  `json:"pageToken,omitempty"`
	Filters   []string `json:"filters,omitempty"`
	SortBy    *string  `json:"sortBy,omitempty"`
	Ascending *bool    `json:"ascending,omitempty"`
}

type ListUsersResponse struct {
	Users         []*User `json:"users"`
	NextPageToken *string `json:"nextPageToken,omitempty"`
	TotalCount    int32   `json:"totalCount"`
}

type LoginInput struct {
	Email           string  `json:"email"`
	Password        string  `json:"password"`
	OrgID           string  `json:"orgId"`
	Metadata        *string `json:"metadata,omitempty"`
	SessionDuration *string `json:"sessionDuration,omitempty"`
}

type LoginResponse struct {
	AccessToken  string `json:"accessToken"`
	RefreshToken string `json:"refreshToken"`
	User         *User  `json:"user"`
	ExpiresIn    int32  `json:"expiresIn"`
	ExpiresAt    string `json:"expiresAt"`
}

type Mutation struct {
}

type Organization struct {
	ID                 string  `json:"id"`
	Name               string  `json:"name"`
	DisplayName        *string `json:"displayName,omitempty"`
	LogoURL            *string `json:"logoUrl,omitempty"`
	PrimaryEmail       string  `json:"primaryEmail"`
	BillingEmail       *string `json:"billingEmail,omitempty"`
	Phone              *string `json:"phone,omitempty"`
	StripeCustomerID   *string `json:"stripeCustomerId,omitempty"`
	SubscriptionPlan   *string `json:"subscriptionPlan,omitempty"`
	Status             Status  `json:"status"`
	Settings           *string `json:"settings,omitempty"`
	IsActive           bool    `json:"isActive"`
	SubscriptionEndsAt *string `json:"subscriptionEndsAt,omitempty"`
	TrialEndsAt        *string `json:"trialEndsAt,omitempty"`
	CreatedAt          string  `json:"createdAt"`
	UpdatedAt          string  `json:"updatedAt"`
	CreatedBy          string  `json:"createdBy"`
	UpdatedBy          string  `json:"updatedBy"`
}

type Query struct {
}

type RefreshTokenResponse struct {
	AccessToken  string `json:"accessToken"`
	RefreshToken string `json:"refreshToken"`
	ExpiresIn    int32  `json:"expiresIn"`
	ExpiresAt    string `json:"expiresAt"`
}

type Role struct {
	ID            string  `json:"id"`
	OrgID         string  `json:"orgId"`
	Name          string  `json:"name"`
	Description   *string `json:"description,omitempty"`
	IsSystemRole  bool    `json:"isSystemRole"`
	IsDefault     bool    `json:"isDefault"`
	Attributes    *string `json:"attributes,omitempty"`
	PermissionIds *string `json:"permissionIds,omitempty"`
	Priority      *int32  `json:"priority,omitempty"`
	Status        Status  `json:"status"`
	CreatedAt     string  `json:"createdAt"`
	UpdatedAt     string  `json:"updatedAt"`
	CreatedBy     string  `json:"createdBy"`
	UpdatedBy     string  `json:"updatedBy"`
}

type Route struct {
	ID              string   `json:"id"`
	OrgID           string   `json:"orgId"`
	Path            string   `json:"path"`
	BasePath        *string  `json:"basePath,omitempty"`
	Methods         []string `json:"methods"`
	Description     *string  `json:"description,omitempty"`
	Metadata        *string  `json:"metadata,omitempty"`
	Params          *string  `json:"params,omitempty"`
	IsProtected     bool     `json:"isProtected"`
	IsPublic        bool     `json:"isPublic"`
	IsDeprecated    bool     `json:"isDeprecated"`
	Version         *string  `json:"version,omitempty"`
	RequiredRoleIds []string `json:"requiredRoleIds,omitempty"`
	DiscoveredAt    *string  `json:"discoveredAt,omitempty"`
	LastAccessed    *string  `json:"lastAccessed,omitempty"`
	AccessCount     *int32   `json:"accessCount,omitempty"`
	CreatedAt       string   `json:"createdAt"`
	UpdatedAt       string   `json:"updatedAt"`
	CreatedBy       string   `json:"createdBy"`
	UpdatedBy       string   `json:"updatedBy"`
}

type UpdateOrganizationInput struct {
	ID           string  `json:"id"`
	Name         *string `json:"name,omitempty"`
	DisplayName  *string `json:"displayName,omitempty"`
	LogoURL      *string `json:"logoUrl,omitempty"`
	PrimaryEmail *string `json:"primaryEmail,omitempty"`
	BillingEmail *string `json:"billingEmail,omitempty"`
	Phone        *string `json:"phone,omitempty"`
	Settings     *string `json:"settings,omitempty"`
	Status       *Status `json:"status,omitempty"`
}

type UpdateRoleInput struct {
	ID            string  `json:"id"`
	OrgID         string  `json:"orgId"`
	Name          *string `json:"name,omitempty"`
	Description   *string `json:"description,omitempty"`
	PermissionIds *string `json:"permissionIds,omitempty"`
	Priority      *int32  `json:"priority,omitempty"`
	Status        *Status `json:"status,omitempty"`
}

type UpdateRouteInput struct {
	ID              string   `json:"id"`
	OrgID           string   `json:"orgId"`
	Path            *string  `json:"path,omitempty"`
	BasePath        *string  `json:"basePath,omitempty"`
	Methods         []string `json:"methods,omitempty"`
	Description     *string  `json:"description,omitempty"`
	Metadata        *string  `json:"metadata,omitempty"`
	IsProtected     *bool    `json:"isProtected,omitempty"`
	IsPublic        *bool    `json:"isPublic,omitempty"`
	RequiredRoleIds []string `json:"requiredRoleIds,omitempty"`
}

type UpdateUserInput struct {
	ID          string  `json:"id"`
	OrgID       string  `json:"orgId"`
	Email       *string `json:"email,omitempty"`
	FirstName   *string `json:"firstName,omitempty"`
	LastName    *string `json:"lastName,omitempty"`
	Phone       *string `json:"phone,omitempty"`
	Attributes  *string `json:"attributes,omitempty"`
	Preferences *string `json:"preferences,omitempty"`
	Status      *Status `json:"status,omitempty"`
}

type User struct {
	ID                string   `json:"id"`
	OrgID             string   `json:"orgId"`
	ExternalID        *string  `json:"externalId,omitempty"`
	Email             string   `json:"email"`
	FirstName         *string  `json:"firstName,omitempty"`
	LastName          *string  `json:"lastName,omitempty"`
	Phone             *string  `json:"phone,omitempty"`
	PasswordHash      *string  `json:"passwordHash,omitempty"`
	AuthProvider      *string  `json:"authProvider,omitempty"`
	AuthProviderID    *string  `json:"authProviderId,omitempty"`
	Status            Status   `json:"status"`
	EmailVerified     bool     `json:"emailVerified"`
	PhoneVerified     bool     `json:"phoneVerified"`
	MfaEnabled        bool     `json:"mfaEnabled"`
	MfaType           *string  `json:"mfaType,omitempty"`
	MfaSecret         *string  `json:"mfaSecret,omitempty"`
	RoleIds           []string `json:"roleIds,omitempty"`
	Attributes        *string  `json:"attributes,omitempty"`
	Preferences       *string  `json:"preferences,omitempty"`
	LastLogin         *string  `json:"lastLogin,omitempty"`
	LoginCount        *int32   `json:"loginCount,omitempty"`
	LastIP            *string  `json:"lastIp,omitempty"`
	PasswordChangedAt *string  `json:"passwordChangedAt,omitempty"`
	EmailVerifiedAt   *string  `json:"emailVerifiedAt,omitempty"`
	CreatedAt         string   `json:"createdAt"`
	UpdatedAt         string   `json:"updatedAt"`
	CreatedBy         string   `json:"createdBy"`
	UpdatedBy         string   `json:"updatedBy"`
}

type ValidateTokenResponse struct {
	Valid         bool     `json:"valid"`
	User          *User    `json:"user,omitempty"`
	PermissionIds []string `json:"permissionIds,omitempty"`
}

type Status string

const (
	StatusUnspecified Status = "UNSPECIFIED"
	StatusActive      Status = "ACTIVE"
	StatusInactive    Status = "INACTIVE"
	StatusSuspended   Status = "SUSPENDED"
	StatusDeleted     Status = "DELETED"
)

var AllStatus = []Status{
	StatusUnspecified,
	StatusActive,
	StatusInactive,
	StatusSuspended,
	StatusDeleted,
}

func (e Status) IsValid() bool {
	switch e {
	case StatusUnspecified, StatusActive, StatusInactive, StatusSuspended, StatusDeleted:
		return true
	}
	return false
}

func (e Status) String() string {
	return string(e)
}

func (e *Status) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Status(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

func (e Status) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
